plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.flywaydb.flyway' version '8.0.1'
    id 'com.google.protobuf' version "0.8.18"
    id 'idea'
}

group = 'ru.pgk'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

ext {
    set('springAiVersion', "0.8.0")
    springCloudVersion = "2023.0.3"
}

def protobufVersion = '3.23.4'
def grpcVersion = '1.58.0'

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    //Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'

    //Mappers
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    //Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    //Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.11.0'
    implementation 'com.squareup.retrofit2:converter-jackson:2.11.0'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.11.0'

    //GRPC
    implementation "io.grpc:grpc-netty"
    implementation "io.grpc:grpc-netty-shaded"
    implementation "io.grpc:grpc-protobuf"
    implementation "io.grpc:grpc-stub"
    compileOnly 'jakarta.annotation:jakarta.annotation-api:1.3.5'
    implementation('net.devh:grpc-client-spring-boot-starter:3.1.0.RELEASE')
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
        mavenBom "io.grpc:grpc-bom:${grpcVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

def envFile = file('../.env')
def envProperties = new Properties()
envProperties.load(envFile.newDataInputStream())

project.ext {
    postgresHost = envProperties.getProperty("POSTGRES_HOST")
    postgresUsername = envProperties.getProperty("POSTGRES_USERNAME")
    postgresPassword = envProperties.getProperty("POSTGRES_PASSWORD")
    postgresDatabase = envProperties.getProperty("POSTGRES_DATABASE")
    postgresSchema = envProperties.getProperty("POSTGRES_SCHEMA")
}

flyway {
    url = "jdbc:postgresql://$project.ext.postgresHost:5432/$project.ext.postgresDatabase"
    user = project.ext.postgresUsername
    password = project.ext.postgresPassword
    locations = ['classpath:db/migration']
    schemas = [project.ext.postgresSchema]
    baselineOnMigrate = true
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
    generatedFilesBaseDir = "$projectDir/src/generated"
    clean {
        delete generatedFilesBaseDir
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

idea {
    module {
        sourceDirs += file("src/generated/main/java")
        sourceDirs += file("src/generated/main/grpc")
        generatedSourceDirs += file("src/generated/main/java")
        generatedSourceDirs += file("src/generated/main/grpc")
    }
}