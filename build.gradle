plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.3'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'org.flywaydb.flyway' version '8.0.1'
}

group = 'ru.pgk'
version = '1.0.0'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
}

ext {
	set('springAiVersion', "0.8.0")
	springCloudVersion = "2023.0.3"
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	//Swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.4'

	//Mappers
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

	//Redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	//Security
	def jjwt_version = '0.11.5'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation "io.jsonwebtoken:jjwt-api:${jjwt_version}"
	runtimeOnly "io.jsonwebtoken:jjwt-impl:${jjwt_version}"
	runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jjwt_version}"

	//Retrofit
	implementation 'com.squareup.retrofit2:retrofit:2.11.0'
	implementation 'com.squareup.retrofit2:converter-jackson:2.11.0'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.11.0'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

def envFile = file('.env')
def envProperties = new Properties()
envProperties.load(envFile.newDataInputStream())

project.ext {
	postgresHost = envProperties.getProperty("POSTGRES_HOST")
	postgresUsername = envProperties.getProperty("POSTGRES_USERNAME")
	postgresPassword = envProperties.getProperty("POSTGRES_PASSWORD")
	postgresDatabase = envProperties.getProperty("POSTGRES_DATABASE")
	postgresSchema = envProperties.getProperty("POSTGRES_SCHEMA")
}

flyway {
	url = "jdbc:postgresql://$project.ext.postgresHost:5432/$project.ext.postgresDatabase"
	user = project.ext.postgresUsername
	password = project.ext.postgresPassword
	locations = ['classpath:db/migration']
	schemas = [project.ext.postgresSchema]
	baselineOnMigrate = true
}